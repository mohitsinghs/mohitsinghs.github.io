{"pageProps":{"title":"Code","posts":[{"title":"A distributed link shortener","author":"Mohit Singh","date":"2021-09-04","excerpt":"In my post about building building link-shortener, I discussed about how I attempted to build a fully functional link shortener. That worked well but I was left with several questions during my previous attempt.","slug":"a-distributed-link-shortner","link":"code/a-distributed-link-shortner"},{"title":"On frontend tooling","author":"Mohit Singh","date":"2021-08-21","excerpt":"One thing I keep saying to people, Love it or hate it but it's still in your mind.. Same happens with me and frontend tooling. When I started creating websites and was recovering from my android madness, the state of frontend tooling was way more complex than today.","slug":"on-frontend-tooling","link":"code/on-frontend-tooling"},{"title":"Laws for Software Engineers","author":"Mohit Singh","date":"2021-08-12","excerpt":"Software Engineering is not always fun and sometimes we face results we never except. And then, there exits a whole set of principles and laws people came up with over time to answer these failures and patterns.","slug":"laws-for-software-engineers","link":"code/laws-for-software-engineers"},{"title":"Story of njk, a tool mistreated","author":"Mohit Singh","date":"2021-08-07","excerpt":"In 2014, I decide to build static websites for others in need, voluntarily. I didn't know much about web technologies but after a little research, I found that static-site-generators were a thing.","slug":"njk","link":"code/njk"},{"title":"Building a link shortener","author":"Mohit Singh","date":"2021-07-26","excerpt":"A while back, I was asked to write a link shortener for a startup. It took me a day to come up with a production ready version but I warned them about collisions and other possible limitations.","slug":"building-a-link-shortner","link":"code/building-a-link-shortner"},{"title":"Not The Tailwind Way","author":"Mohit Singh","date":"2021-07-25","excerpt":"I love Tailwind and it solves a lot of pain points I had writing CSS. The problem is, it pollutes my HTML well beyond refactoring and I've to be lucky to get something broken fixed.","slug":"no-tailwind","link":"code/no-tailwind"},{"title":"Hello","author":"Mohit Singh","date":"2021-07-21","excerpt":"I tried blogging a few times during last 8 years, but ended up stopping, but now I finally feel like I have courage to write things in my mind.","slug":"hello","link":"code/hello"}],"post":{"title":"Building a link shortener","author":"Mohit Singh","date":"2021-07-26","excerpt":"A while back, I was asked to write a link shortener for a startup. It took me a day to come up with a production ready version but I warned them about collisions and other possible limitations.","slug":"building-a-link-shortner","link":"code/building-a-link-shortner","content":"<p>A while back, I was asked to write a link shortener for a startup. It took me a day to come up with a production ready version, but I warned them about collisions and other possible limitations. I used <a href=\"https://github.com/ai/nanoid\" rel=\"nofollow noopener noreferrer\">nanoid</a> to generate IDs. They asked me to use Mongo along with Express, and I did so. Not the best choice due to limited opportunity of optimizations.</p>\n<p>Fast-forward a few months, that link shortener was performing well on a two core ec2 instance. I left that startup later, but one problem that stuck with me was collisions. They used to face errors due to collisions. Collisions increased with time, having some business impact.</p>\n<h2>Rebuilding</h2>\n<p>Later, I decided to write an open source link shortener. I picked <a href=\"https://github.com/gofiber/fiber\" rel=\"nofollow noopener noreferrer\">Fiber</a> (Go) and PostgreSQL instead of Express and Mongo <a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>. After some hours, I had a working link shortener, which was already faster and reliable than what I created previously. I still had to fix a few things —</p>\n<ul>\n<li>Reducing lookup time</li>\n<li>Minimizing failures</li>\n<li>Increasing creation speed</li>\n<li>Increasing retrieval speed</li>\n<li>Adding analytics</li>\n</ul>\n<h2>Reducing lookup time</h2>\n<p>Database lookup before creating every link was problematic. I decided to fix it first. After some digging, I came across <a href=\"https://en.wikipedia.org/wiki/Category:Probabilistic_data_structures\" rel=\"nofollow noopener noreferrer\">Probabilistic Data Structures</a>. The possible candidates were <a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" rel=\"nofollow noopener noreferrer\">Bloom Filters</a>, <a href=\"https://en.wikipedia.org/wiki/Cuckoo_filter\" rel=\"nofollow noopener noreferrer\">Cuckoo Filters</a> and <a href=\"https://en.wikipedia.org/wiki/Quotient_filter\" rel=\"nofollow noopener noreferrer\">Quotient Filters</a>. After some testing and thinking, I picked <a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" rel=\"nofollow noopener noreferrer\">Bloom Filters</a>.</p>\n<p>When I was looking for implementations, I found out that <strong>Bitly</strong> had <a href=\"https://github.com/bitly/dablooms\" rel=\"nofollow noopener noreferrer\">one old implementation</a> in their GitHub repo <a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>. I used <a href=\"https://github.com/bits-and-blooms/bloom\" rel=\"nofollow noopener noreferrer\">bloom</a> after writing a thread-safe wrapper around it. By using that to lookup before generating IDs, the lookup time reduced significantly.</p>\n<h2>Minimizing failures</h2>\n<p>When <a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" rel=\"nofollow noopener noreferrer\">Bloom Filters</a> helped reduce lookup time, I figured out that I can utilize this reduced lookup time to minimize failures due to collisions. I implemented a recursive fallback ID generator with limit. Now, failures due to collisions were reduced, and this link shortener was almost fail-safe, yet much faster than previous one.</p>\n<p>By now, I implemented a way to back up and restore these bloom filters. In case of missing backup, I generated bloom-filters from database.</p>\n<h2>Increasing creation speed</h2>\n<p>Since I was no longer using the database for checking the existence of an ID, the only db query left was <code class=\"language-text\">create</code> query for link. Upon thinking about ways to speed this up, goroutines came in mind. I created a worker to queue and batch insert IDs. Now, for every link creation request, the link data was pushed in batch with the help of channels and since there was no collision of generated ID. This approach worked, and creation speed went up by a few times.</p>\n<h2>Increasing retrieval speed</h2>\n<p>Now that my link creation speed was way higher than retrieval, I wanted to optimize retrieval too, but I was limited by db connections. I tuned my PostgreSQL instance to have around 3000 connections <a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>. This worked, but retrieval wasn't that fast. It still isn't, but the possible solution is to put these ID link pairs in Redis and use that. The insertion can be done on startup <a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>.</p>\n<h2>Adding analytics</h2>\n<p>Since the real benefit of link shortener for businesses was to extract data and analyze traffic from these links. I decided to implement that too. I was already getting IP and User-Agent. All I needed was a user-agent parser and an IP info parser. I found <a href=\"https://github.com/mssola/user_agent\" rel=\"nofollow noopener noreferrer\">a good parser</a> for user agents and used <a href=\"https://dev.maxmind.com/geoip/geoip2/geolite2/\" rel=\"nofollow noopener noreferrer\">GeoLite2</a> from MaxMind to parse IP info. Since every click had info, I decided to implement a worker pool and sent data there for paring and batch ingestion to avoid request slowdowns.</p>\n<p>As I've interacted with almost every popular TimeSeries Database, I picked <a href=\"https://github.com/timescale/timescaledb\" rel=\"nofollow noopener noreferrer\">Timescale</a> since it was already PostgreSQL based and was fast enough. <a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a>. The workers ingested events fine, and I had a good amount of data-points for every single click.</p>\n<h2>Going crazy</h2>\n<p>At some point, I thought about generating all IDs beforehand, randomizing them and using that to create links. No collisions at all. That could be stored in a few GB. I had some other crazy ideas, but I avoided them for now.</p>\n<h2>Conclusion</h2>\n<p>I named this after <strong>Wormholes</strong>, the imaginary links between two distant points in space. This system is still not finished. More databases can be supported, and analytics data can be rendered beautifully to make this a production ready and reliable system, but I'm already building something else and will come back to this later.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\">A database that I try to avoid<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩</a></li>\n<li id=\"fn2\" role=\"doc-endnote\">Which I guess how they solved it too. Not sure if they still do the same<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩</a></li>\n<li id=\"fn3\" role=\"doc-endnote\">Since, just bumping <code class=\"language-text\">max_connections</code> doesn't work. I used <a href=\"https://pgtune.leopard.in.ua/\" rel=\"nofollow noopener noreferrer\">PGTune</a> to generate config for 3000 connections.<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩</a></li>\n<li id=\"fn4\" role=\"doc-endnote\">Any better ideas ?<a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩</a></li>\n<li id=\"fn5\" role=\"doc-endnote\">I admit there were better choices and <a href=\"https://github.com/apache/druid\" rel=\"nofollow noopener noreferrer\">Druid</a> is my favorite, but this was a self-contained system and not a cluster-mess <a href=\"https://github.com/apache/druid\" rel=\"nofollow noopener noreferrer\">Druid</a> is and because I wanted to use <a href=\"https://github.com/timescale/timescaledb\" rel=\"nofollow noopener noreferrer\">Timescale</a><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩</a></li>\n</ol>\n</section>\n"}},"__N_SSG":true}