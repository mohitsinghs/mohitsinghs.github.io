{"pageProps":{"title":"Code","posts":[{"title":"A distributed link shortener","author":"Mohit Singh","date":"2021-09-04","excerpt":"In my post about building building link-shortener, I discussed about how I attempted to build a fully functional link shortener. That worked well but I was left with several questions during my previous attempt.","slug":"a-distributed-link-shortner","link":"code/a-distributed-link-shortner"},{"title":"On frontend tooling","author":"Mohit Singh","date":"2021-08-21","excerpt":"One thing I keep saying to people, Love it or hate it but it's still in your mind.. Same happens with me and frontend tooling. When I started creating websites and was recovering from my android madness, the state of frontend tooling was way more complex than today.","slug":"on-frontend-tooling","link":"code/on-frontend-tooling"},{"title":"Laws for Software Engineers","author":"Mohit Singh","date":"2021-08-12","excerpt":"Software Engineering is not always fun and sometimes we face results we never except. And then, there exits a whole set of principles and laws people came up with over time to answer these failures and patterns.","slug":"laws-for-software-engineers","link":"code/laws-for-software-engineers"},{"title":"Story of njk, a tool mistreated","author":"Mohit Singh","date":"2021-08-07","excerpt":"In 2014, I decide to build static websites for others in need, voluntarily. I didn't know much about web technologies but after a little research, I found that static-site-generators were a thing.","slug":"njk","link":"code/njk"},{"title":"Building a link shortener","author":"Mohit Singh","date":"2021-07-26","excerpt":"A while back, I was asked to write a link shortener for a startup. It took me a day to come up with a production ready version but I warned them about collisions and other possible limitations.","slug":"building-a-link-shortner","link":"code/building-a-link-shortner"},{"title":"Not The Tailwind Way","author":"Mohit Singh","date":"2021-07-25","excerpt":"I love Tailwind and it solves a lot of pain points I had writing CSS. The problem is, it pollutes my HTML well beyond refactoring and I've to be lucky to get something broken fixed.","slug":"no-tailwind","link":"code/no-tailwind"},{"title":"Hello","author":"Mohit Singh","date":"2021-07-21","excerpt":"I tried blogging a few times during last 8 years, but ended up stopping, but now I finally feel like I have courage to write things in my mind.","slug":"hello","link":"code/hello"}],"post":{"title":"Not The Tailwind Way","author":"Mohit Singh","date":"2021-07-25","excerpt":"I love Tailwind and it solves a lot of pain points I had writing CSS. The problem is, it pollutes my HTML well beyond refactoring and I've to be lucky to get something broken fixed.","slug":"no-tailwind","link":"code/no-tailwind","content":"<p>I love Tailwind, and it solves a lot of pain points I had writing CSS. The problem is, it pollutes my HTML well beyond refactoring, and I've to be lucky to get something broken fixed.</p>\n<h2>Partially Broken Animations</h2>\n<p>Recently, I was trying to use combined animations, and they didn't work. After some trial and error, I found that keyframes were missing. I created an issue on their GitHub repo. Meanwhile, I was trying to figure out what's wrong with it.</p>\n<p>It turned out their internal plugin for animations, which was working in v1, was broken in v2. The culprit was this line.</p>\n<div class=\"highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> animationName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseAnimationValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// So this means parseAnimationValue is always an object</span></code></pre></div>\n<p>Raw animations were being parsed, and their value was being extracted in an <code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span></code> for processing. So, <code class=\"language-js\">parseAnimationValue</code> should return an <code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span></code> containing <code class=\"language-js\">name</code>, but the declaration of this function said otherwise.</p>\n<div class=\"highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parseAnimationValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... some parsing work</span>\n  <span class=\"token keyword control-flow\">return</span> animations<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>According to the declaration, for combined animation, it returns an <code class=\"language-js\"><span class=\"token known-class-name class-name\">Array</span></code> of animation <code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span></code>. So, I tried fixing it, which took a few minutes, and created a pull request with tests.</p>\n<p>At this point, I was hoping that in the worst case, I'll get some kind of feedback on how impractical my solution was. After a week, my pull request was still in black hole. So, I simply closed it thinking maybe they don't care, and since my animations were defined in CSS by now. I moved on with life.</p>\n<h2>Broken syntax highlighting</h2>\n<p>So, to reduce class pollution in HTML, I decided to use tailwind in CSS directly. Since, I was planning to redesign my website, I decided to apply it there. Tailwind bundles <code class=\"language-text\">postcss-nested</code> which is <code class=\"language-text\">sass</code> like syntax for <code class=\"language-text\">postcss</code>. Highlighting for this was broken in both VSCode and VIM. Before tailwind, I was using <code class=\"language-text\">postcss-preset-env</code> which included stage 1 implementation of css-nesting spec called <code class=\"language-text\">postcss-nesting</code>. Tailwind supports that. So, I quickly installed it and did necessary changes.</p>\n<div class=\"highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tailwindcss/nesting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-nesting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tailwindcss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The Next build system started to complain that I can only use strings as plugin. Passing this plugin as options didn't work either. The syntax highlight was working great, but my build itself was broken.</p>\n<h2>Down the rabbit hole</h2>\n<p>I decided to fork tailwind and use my fork directly from GitHub. I did and applied my changes as well. Next was <code class=\"language-text\">postcss-nesting</code> so, I made that one default in tailwind. I wanted my changes to be as minimal and as isolated as possible so that merging from upstream will be easy. I found out, no matter what nesting plugin I use, for styles defined in config, tailwind uses <code class=\"language-text\">postcss-nested</code>. After adjusting tests and fixing other bugs, there were still two reasons causing my version to break. <code class=\"language-text\">postcss-nesting</code> didn't support bubble of custom at rules, and the CSS resulted from it has semicolons removed. Luckily, that plugin was very simple, so I added bubbling support for tailwind at rules, fixed semicolons and ported tests to jest.</p>\n<p>Next was the battle of <code class=\"language-text\">commonjs</code> vs <code class=\"language-text\">esm</code> and the build. It took a while to add fallback in imports and fixing broken stuff due to this. My fork was still unusable since npm published version had transpiled commonjs modules. I didn't want to use npm, so I decided to publish build files in an orphan branch. With some git tricks around worktree, I was able to put together a branch with transpiled modules. A deployment script later, I was finally able to use my fork while still being able to rebase with upstream.</p>\n<h2>Conclusion</h2>\n<p>So, while I'm still using Tailwind, I no longer do it the tailwind way, but everything works smoothly now. Instead of doing <code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> tailwindcss</code> I can do <code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> mohitsinghs/tailwindcss<span class=\"token comment\">#x</span></code> and on the top of that I can finally fix things without my pull request in black hole. Investing a day or two to save weeks of waiting on fixes is a better way to learn things we use.</p>\n<h2>Updates</h2>\n<p>So, one of the bugs got fixed in tailwindcss and I deleted my fork but learned a lot during process of mindlessly modifying tailwindcss sources. So, back to tailwind but still not satisfied with a lot of things.</p>\n"}},"__N_SSG":true}